from aiogram import Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiohttp import web
from datetime import datetime, timedelta
import os

from services.payments_fondy import (
    create_payment_link,
    verify_webhook_signature,
    parse_order_id,
)
from services.user_profile import set_subscription

router = Router()

# ==== –¢–∞—Ä–∏—Ñ—ã (–≤ EUR) ‚Äî –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏–∑ .env, –µ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç—ã ====
SUB_MONTH_EUR   = float(os.getenv("SUB_MONTH_EUR",   "4.99"))
SUB_QUARTER_EUR = float(os.getenv("SUB_QUARTER_EUR", "12.99"))
SUB_YEAR_EUR    = float(os.getenv("SUB_YEAR_EUR",    "39.99"))
SUB_DESC        = os.getenv("SUB_DESC", "–î–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ PDF")

PLAN_DAYS = {
    "month":   30,
    "quarter": 90,
    "year":    365,
}

def pay_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∞: {SUB_MONTH_EUR:.2f} EUR / 1 –º–µ—Å—è—Ü")],
            [KeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∞: {SUB_QUARTER_EUR:.2f} EUR / 3 –º–µ—Å—è—Ü–∞")],
            [KeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∞: {SUB_YEAR_EUR:.2f} EUR / 12 –º–µ—Å—è—Ü–µ–≤")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        ],
        resize_keyboard=True
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã –ø–æ –∫–ª–∏–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –∏–ª–∏ ¬´–û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø¬ª
@router.message(F.text.in_({"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (—Ç–µ—Å—Ç)", "üîì –û—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø"}))
async def show_plans(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É üëá",
        reply_markup=pay_keyboard()
    )

# –¢—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã
@router.message(F.text.startswith("üí≥ –û–ø–ª–∞—Ç–∞:"))
async def choose_plan(message: types.Message):
    text = message.text or ""
    user_id = message.from_user.id

    if "1 –º–µ—Å—è—Ü" in text:
        plan_key, amount = "month", SUB_MONTH_EUR
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî 1 –º–µ—Å—è—Ü ({amount:.2f} EUR)"
    elif "3 –º–µ—Å—è—Ü–∞" in text:
        plan_key, amount = "quarter", SUB_QUARTER_EUR
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî 3 –º–µ—Å—è—Ü–∞ ({amount:.2f} EUR)"
    elif "12 –º–µ—Å—è—Ü–µ–≤" in text:
        plan_key, amount = "year", SUB_YEAR_EUR
        title = f"–ü–æ–¥–ø–∏—Å–∫–∞ ‚Äî 12 –º–µ—Å—è—Ü–µ–≤ ({amount:.2f} EUR)"
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –ø–ª–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        return

    # –ì–µ–Ω–µ—Ä–∏–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    try:
        url = create_payment_link(
            user_id=user_id,
            plan_key=plan_key,
            amount=amount,
            description=SUB_DESC,
            # –º–æ–∂–Ω–æ —è–≤–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å response_url/server_callback_url, –µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω –¥–æ–º–µ–Ω
            # response_url="https://example.com/thanks",
            # server_callback_url="https://example.com/fondy/webhook",
        )
        await message.answer(
            f"üí≥ <b>{title}</b>\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}\n\n"
            "–î–ª—è sandbox‚Äë–ø–ª–∞—Ç–µ–∂–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É: <code>4444 5555 6666 1111</code> (–ª—é–±–∞—è –¥–∞—Ç–∞/CCV).",
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã: {e}")

# ==== –í–µ–±—Ö—É–∫ Fondy ====
async def fondy_webhook(request: web.Request) -> web.Response:
    """
    –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ–ª–±—ç–∫ –æ—Ç Fondy (POST, form-urlencoded).
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É HTTPS‚ÄëURL.
    –ù–∞ –ø—Ä–æ–¥–µ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å!
    """
    form = await request.post()
    data = {k: v for k, v in form.items()}

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    if not verify_webhook_signature(data):
        return web.Response(text="bad signature", status=400)

    order_status = data.get("order_status", "")
    order_id = data.get("order_id", "")

    # 2) –î–æ—Å—Ç–∞—ë–º user_id, –ø–ª–∞–Ω
    user_id, plan_key, _rnd = parse_order_id(order_id)
    if not user_id or not plan_key:
        return web.Response(text="bad order_id", status=400)

    # 3) –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    if order_status == "approved":
        days = PLAN_DAYS.get(plan_key, 30)
        until = datetime.utcnow() + timedelta(days=days)
        set_subscription(user_id, until)
        return web.Response(text="OK")

    # –ò–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –Ω–∞–º –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã
    return web.Response(text="IGNORED")
