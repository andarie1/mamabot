from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from handlers.start import start_handler
from services.ai_generator import generate_expert_tip
from services.user_profile import (
    get_trial_status,
    _read_users_data,   # —á–∏—Ç–∞–µ–º –æ–±—â–∏–π JSON –ø—Ä–æ—Ñ–∏–ª–µ–π
    USERS_FILE
)

from datetime import datetime
import json

router = Router()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ ===
def get_tips_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞"), KeyboardButton(text="üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")],
            [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# === –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–ª–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–µ–π—á–∞—Å) ===
async def check_trial_and_inform(message: types.Message) -> bool:
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –†–∞–∑–¥–µ–ª ¬´–°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏¬ª –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º, –ø–æ–¥–ø–∏—Å–∫—É –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ üí≥."
        )
    # –î–∞–∂–µ –µ—Å–ª–∏ trial –∏—Å—Ç—ë–∫ ‚Äî –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ —Å–æ–≤–µ—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã. –ù–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º.
    return True

# === –ü—Ä–æ–≤–µ—Ä–∫–∞/—Ñ–∏–∫—Å —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–æ–≤–µ—Ç–æ–≤ (1/–¥–µ–Ω—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ===
def _can_generate_tip_today(user_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å–æ–≤–µ—Ç –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª—Å—è.
    –ï—Å–ª–∏ –º–æ–∂–Ω–æ ‚Äî —Å—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ users.json (–ø–æ–ª–µ tips_last_gen).
    """
    data = _read_users_data()
    key = str(user_id)
    today = datetime.utcnow().date().isoformat()
    field = "tips_last_gen"

    last = data.get(key, {}).get(field)
    if last == today:
        return False

    data.setdefault(key, {})[field] = today
    USERS_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")
    return True

# === –í—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª ===
@router.message(lambda msg: msg.text == "üí° –°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏")
async def show_tips_menu(message: types.Message):
    await check_trial_and_inform(message)
    await message.answer(
        "üìë –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.\n\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 —Å–æ–≤–µ—Ç –≤ —Å—É—Ç–∫–∏ (–ª—é–±–æ–π —ç–∫—Å–ø–µ—Ä—Ç).",
        reply_markup=get_tips_keyboard()
    )

# === –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –ª–∏–º–∏—Ç–æ–º ===
async def _handle_tip_request(message: types.Message, expert_label: str, expert_key: str):
    # –ú—è–≥–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ —Ç—Ä–∏–∞–ª (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç)
    await check_trial_and_inform(message)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
    if not _can_generate_tip_today(message.from_user.id):
        await message.answer(
            "üìÖ –õ–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω: –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–æ–≤–µ—Ç –≤ —Å—É—Ç–∫–∏.\n"
            "–ó–∞–≥–ª—è–Ω–∏ –∑–∞–≤—Ç—Ä–∞ ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–π —Å–æ–≤–µ—Ç! üòä"
        )
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç
    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –æ—Ç {expert_label}...")
    tip = generate_expert_tip(user_id=message.from_user.id, expert=expert_key)
    await message.answer(f"{expert_label}:\n\n{tip}")

# === –¢—Ä–∏ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ ===
@router.message(lambda msg: msg.text == "üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞")
async def speech_therapist_tip(message: types.Message):
    await _handle_tip_request(message, "üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞", "–ª–æ–≥–æ–ø–µ–¥")

@router.message(lambda msg: msg.text == "üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
async def psychologist_tip(message: types.Message):
    await _handle_tip_request(message, "üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞", "–ø—Å–∏—Ö–æ–ª–æ–≥")

@router.message(lambda msg: msg.text == "üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")
async def pediatrician_tip(message: types.Message):
    await _handle_tip_request(message, "üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞", "–ø–µ–¥–∏–∞—Ç—Ä")

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
