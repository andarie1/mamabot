from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from services.ai_generator import generate_expert_tip
from services.user_profile import get_trial_status

router = Router()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_trial_and_inform(message: types.Message) -> bool:
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí≥."
        )
    if status == "expired":
        await message.answer(
            "üö´ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ—Å—Ç—É–ø –∫ —Å–æ–≤–µ—Ç–∞–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
        )
        return False
    return True

# === –ú–µ–Ω—é —Å–æ–≤–µ—Ç–æ–≤ ===
@router.message(lambda msg: msg.text == "üí° –°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏")
async def show_tips_menu(message: types.Message):
    if not await check_trial_and_inform(message):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞"), KeyboardButton(text="üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")],
            [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üìë –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
        reply_markup=keyboard
    )

# === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–≤–µ—Ç–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ===
async def send_expert_tip(message: types.Message, expert: str, emoji: str):
    if not await check_trial_and_inform(message):
        return
    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –æ—Ç {expert}–∞...")
    tip = generate_expert_tip(user_id=message.from_user.id, expert=expert)
    await message.answer(f"{emoji} –°–æ–≤–µ—Ç {expert}–∞:\n\n{tip}")

# === –õ–æ–≥–æ–ø–µ–¥ ===
@router.message(lambda msg: msg.text == "üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞")
async def speech_therapist_tip(message: types.Message):
    await send_expert_tip(message, "–ª–æ–≥–æ–ø–µ–¥", "üó£")

# === –ü—Å–∏—Ö–æ–ª–æ–≥ ===
@router.message(lambda msg: msg.text == "üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
async def psychologist_tip(message: types.Message):
    await send_expert_tip(message, "–ø—Å–∏—Ö–æ–ª–æ–≥", "üß†")

# === –ü–µ–¥–∏–∞—Ç—Ä ===
@router.message(lambda msg: msg.text == "üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")
async def pediatrician_tip(message: types.Message):
    await send_expert_tip(message, "–ø–µ–¥–∏–∞—Ç—Ä", "üë®‚Äç‚öïÔ∏è")

@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
