from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from handlers.start import start_handler
from services.ai_generator import generate_expert_tip
from services.user_profile import get_trial_status  # <== –¥–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

router = Router()

@router.message(lambda msg: msg.text == "üí° –°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏")
async def show_tips_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞"), KeyboardButton(text="üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")],
            [KeyboardButton(text="üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üìë –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üëá",
        reply_markup=keyboard
    )

async def check_trial_and_inform(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–æ–≤–µ—Ç–∞"""
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí≥."
        )
    if status == "expired":
        await message.answer(
            "üö´ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ—Å—Ç—É–ø –∫ —Å–æ–≤–µ—Ç–∞–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç. –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        )
        return False
    return True

@router.message(lambda msg: msg.text == "üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞")
async def speech_therapist_tip(message: types.Message):
    if not await check_trial_and_inform(message):
        return
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –æ—Ç –ª–æ–≥–æ–ø–µ–¥–∞...")
    tip = generate_expert_tip(user_id=message.from_user.id, expert="–ª–æ–≥–æ–ø–µ–¥")
    await message.answer(f"üó£ –°–æ–≤–µ—Ç –ª–æ–≥–æ–ø–µ–¥–∞:\n\n{tip}")

@router.message(lambda msg: msg.text == "üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
async def psychologist_tip(message: types.Message):
    if not await check_trial_and_inform(message):
        return
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –æ—Ç –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞...")
    tip = generate_expert_tip(user_id=message.from_user.id, expert="–ø—Å–∏—Ö–æ–ª–æ–≥")
    await message.answer(f"üß† –°–æ–≤–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n\n{tip}")

@router.message(lambda msg: msg.text == "üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞")
async def pediatrician_tip(message: types.Message):
    if not await check_trial_and_inform(message):
        return
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–≤–µ—Ç –æ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞...")
    tip = generate_expert_tip(user_id=message.from_user.id, expert="–ø–µ–¥–∏–∞—Ç—Ä")
    await message.answer(f"üë®‚Äç‚öïÔ∏è –°–æ–≤–µ—Ç –ø–µ–¥–∏–∞—Ç—Ä–∞:\n\n{tip}")

@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    await start_handler(message)
