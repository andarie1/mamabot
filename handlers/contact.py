from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import json
from pathlib import Path
from handlers.start import start_handler

router = Router()

QUESTIONS_FILE = Path("data/questions.json")
QUESTIONS_FILE.parent.mkdir(parents=True, exist_ok=True)
if not QUESTIONS_FILE.exists():
    QUESTIONS_FILE.write_text(json.dumps({}, indent=2), encoding="utf-8")

@router.message(lambda msg: msg.text == "üìû –ü–æ–º–æ—â—å –∏ —Å–≤—è–∑—å")
async def show_contact_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")],
            [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üì¢ –ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ üëá",
        reply_markup=keyboard
    )

@router.message(lambda msg: msg.text == "üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_prompt(message: types.Message):
    await message.answer(
        "‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é –¥–ª—è –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!"
    )

@router.message(lambda msg: msg.text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É")
async def suggest_topic_handler(message: types.Message):
    await message.answer(
        "üí° –ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —Ç–µ–º—É, –º–∞—Ä–∞—Ñ–æ–Ω –∏–ª–∏ —á–µ–∫-–ª–∏—Å—Ç –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–≤–∏–¥–µ—Ç—å ‚Äî –Ω–∞–º –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!"
    )

@router.message(lambda msg: msg.reply_to_message and "—Å–≤–æ–π –≤–æ–ø—Ä–æ—Å" in msg.reply_to_message.text)
async def save_question_handler(message: types.Message):
    data = json.loads(QUESTIONS_FILE.read_text(encoding="utf-8").strip() or "{}")
    user_id = str(message.from_user.id)
    data.setdefault(user_id, []).append({
        "username": message.from_user.username,
        "question": message.text,
    })
    QUESTIONS_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    await start_handler(message)
