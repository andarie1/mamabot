from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from services.ai_generator import generate_ai_lesson
from services.progress_tracker import update_progress
from services.user_profile import (
    get_user_age_range,
    has_trial_or_full_access,
    get_trial_status
)

router = Router()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_trial_and_inform(message: types.Message) -> bool:
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ß—Ç–æ–±—ã –∏ –¥–∞–ª—å—à–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí≥."
        )
    if status == "expired":
        await message.answer(
            "üö´ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–¥–µ–ª—É –∑–∞–∫—Ä—ã—Ç. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        )
        return False
    return True

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ¬´–î–µ–Ω—å —Å –¢–∏–º–º–∏¬ª ===
@router.message(lambda msg: msg.text == "üìÖ –î–µ–Ω—å —Å –¢–∏–º–º–∏")
async def day_with_timmy_handler(message: types.Message):
    if not await check_trial_and_inform(message):
        return

    age_range = get_user_age_range(message.from_user.id) or "2‚Äì4 –≥–æ–¥–∞"
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –º–∞–ª—ã—à–∞... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ üß∏")

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–Ω–≥–ª. —Å–ª–æ–≤–∞–º–∏)
        task = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="–æ–±—â–∏–µ")
        ritual = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="—Ä–∏—Ç—É–∞–ª")
        advice = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="—Å–æ–≤–µ—Ç")

        full_message = (
            f"üìÖ <b>–¢–≤–æ–π –î–µ–Ω—å —Å –¢–∏–º–º–∏:</b>\n\n"
            f"üìå <b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{task}\n\n"
            f"üåô <b>–†–∏—Ç—É–∞–ª:</b>\n{ritual}\n\n"
            f"üß† <b>–°–æ–≤–µ—Ç:</b>\n{advice}"
        )

        await message.answer(full_message, parse_mode="HTML")
        update_progress(message.from_user.id, "–î–µ–Ω—å —Å –¢–∏–º–º–∏")

    except Exception as e:
        await message.answer("‚ùå –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        raise e

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
