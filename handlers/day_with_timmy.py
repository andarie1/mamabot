from aiogram import Router, types
from services.ai_generator import generate_ai_lesson
from services.progress_tracker import update_progress
from services.user_profile import (
    get_user_age_range,
    get_trial_status
)

# –î–ª—è —Å—É—Ç–æ—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
from services.user_profile import _read_users_data, USERS_FILE  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON
from datetime import datetime
import json

router = Router()


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ===
def _can_generate_today(user_id: int, module_name: str) -> bool:
    """
    –†–∞–∑—Ä–µ—à–∞–µ—Ç 1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Å—É—Ç–∫–∏ –Ω–∞ –º–æ–¥—É–ª—å.
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ data/users.json:
      { "<user_id>": { "...": "...", "day_with_timmy_last_gen": "YYYY-MM-DD" } }
    """
    data = _read_users_data()
    key = str(user_id)
    today = datetime.utcnow().date().isoformat()
    field = f"{module_name}_last_gen"

    last = data.get(key, {}).get(field)
    if last == today:
        return False

    data.setdefault(key, {})[field] = today
    USERS_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")
    return True


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–Ω–æ —Ä–∞–∑–¥–µ–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π; –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º-—Å–æ–æ–±—â–µ–Ω–∏—è) ===
async def check_trial_and_inform(message: types.Message) -> bool:
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª–æ–º, –∞ –ø–æ–¥–ø–∏—Å–∫—É –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ üí≥."
        )
    # –†–∞–∑–¥–µ–ª —Å–µ–π—á–∞—Å –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö, –¥–∞–∂–µ –µ—Å–ª–∏ trial –∏—Å—Ç—ë–∫ ‚Äî –ø–æ—ç—Ç–æ–º—É –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
    return True


# === –ì–ª–∞–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ¬´–î–µ–Ω—å —Å –¢–∏–º–º–∏¬ª (1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏) ===
@router.message(lambda msg: msg.text == "üìÖ –î–µ–Ω—å —Å –¢–∏–º–º–∏")
async def day_with_timmy_handler(message: types.Message):
    if not await check_trial_and_inform(message):
        return

    # —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
    if not _can_generate_today(message.from_user.id, "day_with_timmy"):
        await message.answer("‚è≥ –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–π –∫–æ–º–ø–ª–µ–∫—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–î–µ–Ω—å —Å –¢–∏–º–º–∏¬ª. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!")
        return

    age_range = get_user_age_range(message.from_user.id) or "2‚Äì4 –≥–æ–¥–∞"
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –º–∞–ª—ã—à–∞... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ üß∏")

    try:
        # –ì–µ–Ω–µ—Ä–∏–º 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–∞ (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è; –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ ‚Äî –≤ —Å–∫–æ–±–∫–∞—Ö —Å —Ä—É—Å—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º)
        task = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="–æ–±—â–∏–µ")
        ritual = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="—Ä–∏—Ç—É–∞–ª")
        advice = generate_ai_lesson(message.from_user.id, age_range=age_range, topic="—Å–æ–≤–µ—Ç")

        full_message = (
            f"üìÖ <b>–¢–≤–æ–π –î–µ–Ω—å —Å –¢–∏–º–º–∏</b>\n\n"
            f"üìå <b>–ó–∞–¥–∞–Ω–∏–µ:</b>\n{task}\n\n"
            f"üåô <b>–†–∏—Ç—É–∞–ª:</b>\n{ritual}\n\n"
            f"üß† <b>–°–æ–≤–µ—Ç:</b>\n{advice}"
        )

        await message.answer(full_message, parse_mode="HTML")
        update_progress(message.from_user.id, "–î–µ–Ω—å —Å –¢–∏–º–º–∏")

    except Exception as e:
        await message.answer("‚ùå –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        raise e


# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
