from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, FSInputFile
)
from services.user_profile import (
    has_full_access,
    get_user_age_range,
    save_user_age_range
)
import sqlite3
import os

router = Router()

AGE_CHOICES = ["0‚Äì2 –≥–æ–¥–∞", "2‚Äì4 –≥–æ–¥–∞", "4‚Äì6 –ª–µ—Ç"]

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
def get_age_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=age)] for age in AGE_CHOICES],
        resize_keyboard=True
    )

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ===
@router.message(F.text == "üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ PDF")
async def show_library_menu(message: types.Message):
    user_id = message.from_user.id
    age = get_user_age_range(user_id)
    if not age:
        await message.answer(
            "üë∂ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
            reply_markup=get_age_keyboard()
        )
        return

    if not has_full_access(user_id):
        await message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∑–∞–∫—Ä—ã—Ç.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å PDF-—á–µ–∫-–ª–∏—Å—Ç—ã –∏ –≥–∏–¥—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí≥."
        )
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ß–µ–∫-–ª–∏—Å—Ç—ã"), KeyboardButton(text="üìò –ì–∏–¥—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¢–∏–º–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
@router.message(F.text.in_(AGE_CHOICES))
async def handle_age_selection(message: types.Message):
    save_user_age_range(message.from_user.id, message.text.strip())
    await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.")
    await show_library_menu(message)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î —Å —É—á—ë—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
def get_library_items_by_type_and_age(item_type: str, age_range: str):
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()

    path_filter = "checklists" if item_type == "checklist" else "guides"
    age_range = age_range.strip()

    cursor.execute("""
        SELECT age_from, age_to FROM age_ranges WHERE name = ?
    """, (age_range,))
    age_data = cursor.fetchone()

    if not age_data:
        conn.close()
        return []

    age_from, age_to = age_data

    cursor.execute("""
        SELECT l.id, l.title, l.description
        FROM library l
        JOIN age_bindings ab ON ab.content_type = 'library' AND ab.content_id = l.id
        JOIN age_ranges ar ON ar.id = ab.age_id
        WHERE ar.age_from <= ? AND ar.age_to >= ? AND l.file_path LIKE ?
        GROUP BY l.id
    """, (age_to, age_from, f"%{path_filter}%"))

    items = cursor.fetchall()
    conn.close()
    return items

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ ===
@router.message(F.text == "üìã –ß–µ–∫-–ª–∏—Å—Ç—ã")
async def show_checklists(message: types.Message):
    user_id = message.from_user.id
    age_range = get_user_age_range(user_id).strip()

    if not has_full_access(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–µ–∫-–ª–∏—Å—Ç–∞–º.")
        return

    items = get_library_items_by_type_and_age("checklist", age_range)
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return

    for item_id, title, description in items:
        preview = description[:200] + "..." if description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –ß–∏—Ç–∞—Ç—å", callback_data=f"preview_{item_id}"),
                InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{item_id}")
            ]
        ])
        await message.answer(f"<b>{title}</b>\n{preview}", reply_markup=keyboard, parse_mode="HTML")

# === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∏–¥–æ–≤ ===
@router.message(F.text == "üìò –ì–∏–¥—ã")
async def show_guides(message: types.Message):
    user_id = message.from_user.id
    age_range = get_user_age_range(user_id).strip()

    if not has_full_access(user_id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∏–¥–∞–º.")
        return

    items = get_library_items_by_type_and_age("guide", age_range)
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∏–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return

    for item_id, title, description in items:
        preview = description[:200] + "..." if description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÑ –ß–∏—Ç–∞—Ç—å", callback_data=f"preview_{item_id}"),
                InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", callback_data=f"download_{item_id}")
            ]
        ])
        await message.answer(f"<b>{title}</b>\n{preview}", reply_markup=keyboard, parse_mode="HTML")

# === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏ ===
@router.callback_query(F.data.startswith("preview_"))
async def preview_selected_pdf(callback: CallbackQuery):
    item_id = int(callback.data.replace("preview_", ""))
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, description FROM library WHERE id = ?", (item_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        title, description = result
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîΩ –ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"full_{item_id}")]
        ])
        await callback.message.answer(f"üìÑ <b>{title}</b>\n\n{description[:200]}...", reply_markup=keyboard, parse_mode="HTML")
    else:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# === –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ ===
@router.callback_query(F.data.startswith("full_"))
async def full_description(callback: CallbackQuery):
    item_id = int(callback.data.replace("full_", ""))
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, description FROM library WHERE id = ?", (item_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        title, description = result
        await callback.message.answer(f"üìñ <b>{title}</b>\n\n{description}", parse_mode="HTML")
    else:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await callback.answer()

# === –ó–∞–≥—Ä—É–∑–∫–∞ PDF ===
@router.callback_query(F.data.startswith("download_"))
async def send_selected_pdf(callback: CallbackQuery):
    item_id = int(callback.data.replace("download_", ""))
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, file_path FROM library WHERE id = ?", (item_id,))
    result = cursor.fetchone()
    conn.close()

    if result:
        title, file_path = result
        if os.path.exists(file_path):
            await callback.message.answer_document(
                FSInputFile(file_path),
                caption=f"üìÑ {title}"
            )
        else:
            await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    else:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await callback.answer()

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)