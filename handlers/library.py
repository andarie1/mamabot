from aiogram import Router, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, FSInputFile
)
from services.user_profile import (
    has_full_access,
    get_user_age_range,
    save_user_age_range
)
from services.payments_fondy import create_payment_link
import sqlite3
import os

router = Router()

# === Paywall —Ç–µ–∫—Å—Ç ===
PAYWALL_MSG = (
    "üîí –†–∞–∑–¥–µ–ª ¬´–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ PDF¬ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
    "–ü–æ–∫–∞ –º—ã –≥–æ—Ç–æ–≤–∏–º –æ–ø–ª–∞—Ç—É, —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∑–∞–∫—Ä—ã—Ç. "
    "–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏: ¬´üìÖ –î–µ–Ω—å —Å –¢–∏–º–º–∏¬ª, ¬´üìö –û–±—É—á–µ–Ω–∏–µ¬ª, "
    "¬´üí° –°–æ–≤–µ—Ç—ã –æ—Ç –ø—Ä–æ—Ñ–∏¬ª, ¬´üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª, ¬´üîñ –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ¬ª.\n\n"
    "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ PDF-–≥–∞–π–¥–∞–º –∏ —á–µ–∫-–ª–∏—Å—Ç–∞–º, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É üëá"
)

# === –¢–∞—Ä–∏—Ñ—ã –∏–∑ .env ===
PLANS = {
    "month":  {"title": "1 –º–µ—Å—è—Ü",   "amount": float(os.getenv("SUB_MONTH_EUR", "4.99"))},
    "quarter":{"title": "3 –º–µ—Å—è—Ü–∞",  "amount": float(os.getenv("SUB_QUARTER_EUR", "12.99"))},
    "year":   {"title": "12 –º–µ—Å—è—Ü–µ–≤","amount": float(os.getenv("SUB_YEAR_EUR", "39.99"))},
}
SUB_DESC = os.getenv("SUB_DESC", "–î–æ—Å—Ç—É–ø –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ PDF")

def paywall_keyboard(user_id: int) -> InlineKeyboardMarkup:
    kb_rows = []
    for key, plan in PLANS.items():
        url = create_payment_link(
            user_id=user_id,
            amount_eur=plan["amount"],
            description=f"{SUB_DESC} ‚Äî {plan['title']}",
            plan_key=key
        )
        kb_rows.append([InlineKeyboardButton(text=f"üí≥ {plan['title']} ‚Äî {plan['amount']:.2f} ‚Ç¨", url=url)])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)

AGE_CHOICES = ["0‚Äì2 –≥–æ–¥–∞", "2‚Äì4 –≥–æ–¥–∞", "4‚Äì6 –ª–µ—Ç"]

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_age_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=age)] for age in AGE_CHOICES],
        resize_keyboard=True
    )

def paywall_keyboard() -> InlineKeyboardMarkup:
    # —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"üí≥ {PLANS['month']['title']} ‚Ä¢ {PLANS['month']['amount']:.2f} ‚Ç¨",
            callback_data="pay_sub:month"
        )],
        [InlineKeyboardButton(
            text=f"üí≥ {PLANS['quarter']['title']} ‚Ä¢ {PLANS['quarter']['amount']:.2f} ‚Ç¨",
            callback_data="pay_sub:quarter"
        )],
        [InlineKeyboardButton(
            text=f"üí≥ {PLANS['year']['title']} ‚Ä¢ {PLANS['year']['amount']:.2f} ‚Ç¨",
            callback_data="pay_sub:year"
        )],
    ])

def library_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ß–µ–∫-–ª–∏—Å—Ç—ã"), KeyboardButton(text="üìò –ì–∏–¥—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# === –£—Ç–∏–ª–∏—Ç—ã (–º–µ–Ω—å—à–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è) ===
async def require_age_or_keyboard(message: types.Message) -> str | None:
    """–í–µ—Ä–Ω—ë—Ç age_range –∏–ª–∏ –ø–æ–∫–∞–∂–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≤–µ—Ä–Ω—ë—Ç None."""
    age = get_user_age_range(message.from_user.id)
    if not age:
        await message.answer("üë∂ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=get_age_keyboard())
        return None
    return age

async def require_access_or_paywall(message: types.Message) -> bool:
    """–í–µ—Ä–Ω—ë—Ç True –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∂–µ—Ç paywall –∏ –≤–µ—Ä–Ω—ë—Ç False."""
    if has_full_access(message.from_user.id):
        return True
    await message.answer(PAYWALL_MSG, reply_markup=paywall_keyboard())
    return False

def get_library_items_by_type_and_age(item_type: str, age_range: str):
    """–î–æ—Å—Ç–∞—ë—Ç —Å–ø–∏—Å–æ–∫ (id, title) –∏–∑ –ë–î –ø–æ —Ç–∏–ø—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É."""
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()

    path_filter = "checklists" if item_type == "checklist" else "guides"
    age_range = (age_range or "").strip()

    cursor.execute("SELECT age_from, age_to FROM age_ranges WHERE name = ?", (age_range,))
    age_data = cursor.fetchone()
    if not age_data:
        conn.close()
        return []

    age_from, age_to = age_data

    cursor.execute("""
        SELECT l.id, l.title
        FROM library l
        JOIN age_bindings ab ON ab.content_type = 'library' AND ab.content_id = l.id
        JOIN age_ranges ar ON ar.id = ab.age_id
        WHERE ar.age_from <= ? AND ar.age_to >= ? AND l.file_path LIKE ?
        GROUP BY l.id
        ORDER BY l.id DESC
    """, (age_to, age_from, f"%{path_filter}%"))

    items = cursor.fetchall()
    conn.close()
    return items

async def send_items_by_type(message: types.Message, item_type: str, pretty_icon: str):
    """–û–±—â–∏–π –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–æ–≤/–≥–∏–¥–æ–≤."""
    if not await require_access_or_paywall(message):
        return

    age_range = await require_age_or_keyboard(message)
    if not age_range:
        return

    items = get_library_items_by_type_and_age(item_type, age_range)
    if not items:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.")
        return

    for item_id, title in items:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF", callback_data=f"download_{item_id}")]
        ])
        await message.answer(f"{pretty_icon} <b>{title}</b>", reply_markup=kb, parse_mode="HTML")

# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(F.text == "üìñ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ PDF")
async def show_library_menu(message: types.Message):
    # –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
    age = get_user_age_range(message.from_user.id)
    if not age:
        await message.answer("üë∂ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=get_age_keyboard())
        return

    if not has_full_access(message.from_user.id):
        await message.answer(PAYWALL_MSG, reply_markup=paywall_keyboard())
        return

    await message.answer("üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¢–∏–º–º–∏!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=library_menu_keyboard())

@router.message(F.text.in_(AGE_CHOICES))
async def handle_age_selection(message: types.Message):
    save_user_age_range(message.from_user.id, message.text.strip())
    await message.answer("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–ª–∞—Ç–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏.")
    await show_library_menu(message)

@router.message(F.text == "üìã –ß–µ–∫-–ª–∏—Å—Ç—ã")
async def show_checklists(message: types.Message):
    await send_items_by_type(message, item_type="checklist", pretty_icon="üìÑ")

@router.message(F.text == "üìò –ì–∏–¥—ã")
async def show_guides(message: types.Message):
    await send_items_by_type(message, item_type="guide", pretty_icon="üìò")

@router.callback_query(F.data.startswith("download_"))
async def send_selected_pdf(callback: CallbackQuery):
    # Paywall –∏ –ø—Ä–∞–≤–∞
    if not has_full_access(callback.from_user.id):
        await callback.message.answer(PAYWALL_MSG, reply_markup=paywall_keyboard())
        await callback.answer()
        return

    # –î–æ—Å—Ç–∞—ë–º —Ñ–∞–π–ª
    item_id = int(callback.data.replace("download_", ""))
    conn = sqlite3.connect("db/mamabot_db.db")
    cursor = conn.cursor()
    cursor.execute("SELECT title, file_path FROM library WHERE id = ?", (item_id,))
    result = cursor.fetchone()
    conn.close()

    if not result:
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback.answer()
        return

    title, file_path = result
    if not os.path.exists(file_path):
        await callback.message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        await callback.answer()
        return

    await callback.message.answer_document(FSInputFile(file_path), caption=f"üìÑ {title}")
    await callback.answer()

# === –û–ø–ª–∞—Ç–∞: 3 —Ç–∞—Ä–∏—Ñ–∞ (Fondy) ===
@router.callback_query(F.data.startswith("pay_sub:"))
async def create_payment(callback: CallbackQuery):
    plan_key = callback.data.split(":", 1)[1]
    plan = PLANS.get(plan_key)
    if not plan:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    try:
        url = create_payment_link(
            user_id=callback.from_user.id,
            amount_eur=plan["amount"],
            description=f"{SUB_DESC} ‚Äî {plan['title']}",
            response_url=None,
            server_callback_url=None
        )
        await callback.message.answer(
            f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞: {plan['title']}</b>\n"
            f"–°—É–º–º–∞: {plan['amount']:.2f} EUR\n\n"
            f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}",
            parse_mode="HTML"
        )
    except Exception:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await callback.answer()

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
