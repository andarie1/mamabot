from aiogram import Router, types
from aiogram.filters import Command
from pathlib import Path
import json
import os
import logging
from dotenv import load_dotenv

router = Router()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
admin_ids_str = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(uid.strip()) for uid in admin_ids_str.split(",") if uid.strip().isdigit()]

@router.message(Command("admin"))
async def admin_report(message: types.Message):
    user_id = message.from_user.id

    # –ó–∞—â–∏—Ç–∞: –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
        users_path = Path("data/users.json")
        users_count = 0
        if users_path.exists():
            users_data = json.loads(users_path.read_text(encoding="utf-8").strip() or "{}")
            users_count = len(users_data)

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===
        progress_path = Path("data/progress.json")
        total_activities = 0
        last_activity = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if progress_path.exists():
            progress_data = json.loads(progress_path.read_text(encoding="utf-8").strip() or "{}")
            total_activities = sum(len(acts) for acts in progress_data.values())
            all_activities = [
                activity["timestamp"]
                for activities in progress_data.values()
                for activity in activities
            ]
            if all_activities:
                last_activity = max(all_activities)

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ===
        questions_path = Path("data/questions.json")
        last_questions = []
        if questions_path.exists():
            questions_data = json.loads(questions_path.read_text(encoding="utf-8").strip() or "{}")
            for uid, qlist in questions_data.items():
                for q in qlist:
                    username = f"@{q['username']}" if q.get('username') else '–∞–Ω–æ–Ω–∏–º'
                    last_questions.append(f"{username}: {q['question']}")
            last_questions = last_questions[-5:]

        # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ ===
        report = (
            f"üìä <b>–û—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
            f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>{total_activities}</b>\n"
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{last_activity}</b>\n\n"
        )
        if last_questions:
            report += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n" + "\n".join([f"- {q}" for q in last_questions])
        else:
            report += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –Ω–µ—Ç."

        await message.answer(report, parse_mode="HTML")

    except Exception as e:
        logging.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏ –≤ –ª–æ–≥–∞—Ö.")
