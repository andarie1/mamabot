from aiogram import Router, types
from aiogram.filters import Command
from pathlib import Path
import json

router = Router()


@router.message(Command("admin"))
async def admin_report(message: types.Message):
    user_id = message.from_user.id

    # –ó–∞—â–∏—Ç–∞: –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if user_id != 123456789:  # –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π Telegram ID
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_path = Path("data/users.json")
    users_count = 0
    if users_path.exists():
        try:
            users_data = json.loads(users_path.read_text(encoding="utf-8").strip() or "{}")
            users_count = len(users_data)
        except json.JSONDecodeError:
            pass

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_path = Path("data/progress.json")
    total_activities = 0
    last_activity = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    if progress_path.exists():
        try:
            progress_data = json.loads(progress_path.read_text(encoding="utf-8").strip() or "{}")
            total_activities = sum(len(acts) for acts in progress_data.values())
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ user_id)
            last_user_activities = progress_data.get(str(user_id), [])
            if last_user_activities:
                last_activity = last_user_activities[-1]["timestamp"]
        except json.JSONDecodeError:
            pass

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_path = Path("data/questions.json")
    last_questions = []
    if questions_path.exists():
        try:
            questions_data = json.loads(questions_path.read_text(encoding="utf-8").strip() or "{}")
            for uid, qlist in questions_data.items():
                for q in qlist:
                    last_questions.append(f"@{q['username'] or '–∞–Ω–æ–Ω–∏–º'}: {q['question']}")
            last_questions = last_questions[-5:]
        except json.JSONDecodeError:
            pass

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    report = (
        f"üìä <b>–û—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>{total_activities}</b>\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{last_activity}</b>\n\n"
    )
    if last_questions:
        report += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n" + "\n".join([f"- {q}" for q in last_questions])
    else:
        report += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –Ω–µ—Ç."

    await message.answer(report, parse_mode="HTML")
