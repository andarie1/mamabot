from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from services.progress_tracker import get_last_activities

router = Router()
logger = logging.getLogger(__name__)

RECENT_BTN = "üîñ –ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ"
BACK_BTN = "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

def _back_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=BACK_BTN)]],
        resize_keyboard=True
    )

# === –ú–µ–Ω—é "–ù–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ" ===
@router.message(F.text == RECENT_BTN)
async def recent_views_handler(message: types.Message):
    try:
        logger.info("Recent: handler triggered for user %s", message.from_user.id)
        last_activities = get_last_activities(message.from_user.id, limit=3)

        if not last_activities:
            await message.answer(
                "üîñ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π. –ù–∞—á–Ω–∏ —Å ¬´–î–Ω—è —Å –¢–∏–º–º–∏¬ª –∏–ª–∏ AI‚Äë–∑–∞–¥–∞–Ω–∏—è!",
                reply_markup=_back_kb()
            )
            return

        text = "üîñ <b>–¢–≤–æ–∏ –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n" + "\n".join(f"‚Ä¢ {a}" for a in last_activities)
        await message.answer(text, reply_markup=_back_kb(), parse_mode="HTML")
    except Exception:
        logger.exception("Recent: error for user %s", message.from_user.id)
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=_back_kb())

# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(F.text == BACK_BTN)
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
