from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from services.pdf_generator import generate_lesson_pdf
from services.voice import generate_voice
from services.checklist_generator import generate_checklist_pdf
from services.progress_tracker import update_progress
from services.gpt_lesson_generator import generate_ai_lesson
from services.progress_report import generate_progress_report

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåü –ú–æ–π –ø–æ–º–æ—â–Ω–∏–∫")],
            [KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ")],
            [KeyboardButton(text="üçº –î–æ 4 –ª–µ—Ç"), KeyboardButton(text="üë∂ 4‚Äì6 –ª–µ—Ç")],
            [KeyboardButton(text="üß† –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìû –°–≤—è–∑—å —Å –Ω–∞–º–∏")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–∞–º–∞! üß∏ –Ø ‚Äî –¢–∏–º–º–∏. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üëá",
        reply_markup=keyboard
    )

@router.message(lambda msg: msg.text == "üéì –£—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
async def lesson_handler(message: types.Message):
    age = 5  # –ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –º–∞–º—ã
    level = "–Ω–∞—á–∞–ª—å–Ω—ã–π"
    task = generate_ai_lesson(user_id=message.from_user.id, age=age, level=level)

    pdf_path = generate_lesson_pdf(message.from_user.first_name, task, f"{message.from_user.id}_lesson.pdf")
    voice_path = generate_voice(task, f"{message.from_user.id}_lesson.mp3")

    await message.answer_document(FSInputFile(pdf_path), caption="üìÑ –¢–≤–æ—ë AI-–∑–∞–¥–∞–Ω–∏–µ –æ—Ç –¢–∏–º–º–∏ –≥–æ—Ç–æ–≤–æ!")
    await message.answer_voice(FSInputFile(voice_path), caption="üéß –ê –≤–æ—Ç –≥–æ–ª–æ—Å –¢–∏–º–º–∏ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–π –∑–∞ –Ω–∏–º!")

    update_progress(message.from_user.id, "AI-—É—Ä–æ–∫")


@router.message(lambda msg: msg.text == "üìÑ –ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–¥–µ–ª–∏")
async def checklist_handler(message: types.Message):
    tasks = [
        "–°–æ—Å—á–∏—Ç–∞–π –¥–æ 10 –≤—Å–ª—É—Ö",
        "–ù–∞–π–¥–∏ –¥–æ–º–∞ 3 –∫—Ä–∞—Å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞",
        "–ü–æ–≤—Ç–æ—Ä–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞: sun, cat, tree",
        "–°–¥–µ–ª–∞–π 5 —Ö–ª–æ–ø–∫–æ–≤ –∏ 3 –ø—Ä—ã–∂–∫–∞",
        "–û–±–≤–µ–¥–∏ –∫—Ä—É–≥–∏ –Ω–∞ –±—É–º–∞–≥–µ"
    ]
    filename = f"{message.from_user.id}_checklist.pdf"
    pdf_path = generate_checklist_pdf(message.from_user.first_name, tasks, filename)

    await message.answer_document(FSInputFile(pdf_path), caption="üìã –í–æ—Ç —Ç–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!")
    update_progress(message.from_user.id, "–ß–µ–∫-–ª–∏—Å—Ç –Ω–µ–¥–µ–ª–∏")


@router.message(Command("age"))
async def ask_age(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="4"), KeyboardButton(text="5"), KeyboardButton(text="6")]
        ],
        resize_keyboard=True
    )
    await message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–≤–æ–µ–º—É —Ä–µ–±—ë–Ω–∫—É? –í—ã–±–µ—Ä–∏ üëá", reply_markup=keyboard)


@router.message(lambda msg: msg.text in {"4", "5", "6"})
async def save_age_handler(message: types.Message):
    from services.user_profile import save_user_age
    save_user_age(message.from_user.id, int(message.text))
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É üß†")


@router.message(lambda msg: msg.text == "üìà –û—Ç—á—ë—Ç")
async def report_handler(message: types.Message):
    pdf_path = generate_progress_report(message.from_user.id, message.from_user.first_name)
    if pdf_path:
        await message.answer_document(FSInputFile(pdf_path), caption="üìä –í–æ—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å!")
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ üòî")

