from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from services.ai_generator import generate_ai_lesson
from services.user_profile import (
    get_user_age_range,
    save_user_age_range,
    get_trial_status,
    _read_users_data,   # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π users.json
    USERS_FILE
)

from datetime import datetime
import json

router = Router()

AGE_CHOICES = ["0‚Äì2 –≥–æ–¥–∞", "2‚Äì4 –≥–æ–¥–∞", "4‚Äì6 –ª–µ—Ç"]


# === –°—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç (1 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è/–¥–µ–Ω—å –Ω–∞ –º–æ–¥—É–ª—å ¬´education_ai¬ª) ===
def _can_generate_today(user_id: int, module_name: str) -> bool:
    data = _read_users_data()
    key = str(user_id)
    today = datetime.utcnow().date().isoformat()
    field = f"{module_name}_last_gen"

    last = data.get(key, {}).get(field)
    if last == today:
        return False

    data.setdefault(key, {})[field] = today
    USERS_FILE.write_text(json.dumps(data, indent=2, ensure_ascii=False), encoding="utf-8")
    return True


# === –ú—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–ª–∞ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø) ===
async def check_trial_and_inform(message: types.Message) -> bool:
    status = get_trial_status(message.from_user.id)
    if status == "almost_over":
        await message.answer(
            "‚è≥ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –†–∞–∑–¥–µ–ª ¬´–û–±—É—á–µ–Ω–∏–µ¬ª –æ—Å—Ç–∞—ë—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º, –ø–æ–¥–ø–∏—Å–∫—É –≤–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ üí≥."
        )
    # –î–∞–∂–µ –µ—Å–ª–∏ trial –∏—Å—Ç—ë–∫ ‚Äî ¬´–û–±—É—á–µ–Ω–∏–µ¬ª —Å–µ–π—á–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ; –Ω–∏—á–µ–≥–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º.
    return True


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è ===
@router.message(lambda msg: msg.text == "üìö –û–±—É—á–µ–Ω–∏–µ")
async def show_education_menu(message: types.Message):
    if not await check_trial_and_inform(message):
        return
    await message.answer("üìã –ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=get_education_keyboard())


def get_education_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üî¢ –í—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞")],
            [KeyboardButton(text="üì∑ –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ —É—Ä–æ–∫–∏ (AI)")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# === –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
@router.message(lambda msg: msg.text == "üî¢ –í—ã–±—Ä–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞")
async def choose_age_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0‚Äì2 –≥–æ–¥–∞"), KeyboardButton(text="2‚Äì4 –≥–æ–¥–∞"), KeyboardButton(text="4‚Äì6 –ª–µ—Ç")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=keyboard)


# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ ===
@router.message(lambda msg: msg.text in AGE_CHOICES)
async def confirm_user_age(message: types.Message):
    save_user_age_range(message.from_user.id, message.text)
    await message.answer(f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç –≤—ã–±—Ä–∞–Ω: {message.text}.", reply_markup=get_education_keyboard())


# === AI-–∑–∞–¥–∞–Ω–∏—è (1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏) ===
@router.message(lambda msg: msg.text == "üì∑ –†–∞–∑–≤–∏–≤–∞—é—â–∏–µ —É—Ä–æ–∫–∏ (AI)")
async def ai_lesson_handler(message: types.Message):
    if not await check_trial_and_inform(message):
        return

    user_id = message.from_user.id
    # —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç
    if not _can_generate_today(user_id, "education_ai"):
        await message.answer("‚è≥ –°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ. –ù–æ–≤–æ–µ ‚Äî –∑–∞–≤—Ç—Ä–∞!")
        return

    age_range = get_user_age_range(user_id) or "2‚Äì4 –≥–æ–¥–∞"
    topic = "–æ–±—â–∏–µ"
    level = "–Ω–∞—á–∞–ª—å–Ω—ã–π"

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é AI-–∑–∞–¥–∞–Ω–∏–µ... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, –¢–∏–º–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç üß†")
    try:
        task = generate_ai_lesson(user_id=user_id, age_range=age_range, level=level, topic=topic)
        await message.answer(f"üß∏ –í–æ—Ç —Ç–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ:\n{task}")
    except Exception as e:
        await message.answer("‚ùå –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        raise e


# === –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@router.message(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_back_to_main(message: types.Message):
    from handlers.start import start_handler
    await start_handler(message)
