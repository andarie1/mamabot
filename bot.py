import asyncio
import logging
import os
import sqlite3

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from article_parser import parse_article_from_url

from db import (
    init_db,
    get_tips_by_age,
    get_pending_articles,
    approve_article,
    delete_article,
    article_to_pdf,
    save_article
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
init_db()

# === –ö–ù–û–ü–ö–ò –í–û–ó–†–ê–°–¢–ù–´–• –ö–ê–¢–ï–ì–û–†–ò–ô ===
@dp.message(F.text.in_({"üë∂ 0‚Äì1 –≥–æ–¥", "üßí 1‚Äì2 –≥–æ–¥–∞", "üë¶ 3‚Äì6 –ª–µ—Ç", "üéí 7+ –ª–µ—Ç"}))
async def handle_age_category(message: types.Message):
    age_map = {
        "üë∂ 0‚Äì1 –≥–æ–¥": "baby_0_1",
        "üßí 1‚Äì2 –≥–æ–¥–∞": "baby_1_2",
        "üë¶ 3‚Äì6 –ª–µ—Ç": "baby_3_6",
        "üéí 7+ –ª–µ—Ç": "baby_7_up"
    }

    age_key = age_map[message.text]
    tips = get_tips_by_age(age_key)

    if tips:
        response = ""
        for tip in tips:
            response += f"üìå <b>{tip['title']}</b>\n{tip['content']}\n\n"
        await message.answer(response)
    else:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º!")

# === GET ADMIN ID ===
@dp.message(Command("get_id"))
async def get_admin_id(message: types.Message):
    await message.answer(f"–í–∞—à ID: <code>{message.from_user.id}</code>")

# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–¢–ê–¢–¨–ò –ü–û –°–°–´–õ–ö–ï ===
@dp.message(Command("add_article"))
async def add_article_url(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /add_article <—Å—Å—ã–ª–∫–∞>")
        return

    url = parts[1]
    try:
        title = parse_article_from_url(url)
        await message.answer(f"‚úÖ –°—Ç–∞—Ç—å—è ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –∂–¥—ë—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏:\n{e}")

# === –ü–û–ö–ê–ó –°–¢–ê–¢–ï–ô –ù–ê –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï ===
@dp.message(Command("approve_articles"))
async def approve_articles_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    pending = get_pending_articles()
    if not pending:
        await message.answer("–ù–µ—Ç —Å—Ç–∞—Ç–µ–π –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
        return

    keyboard = [
        [InlineKeyboardButton(text=f"{title} [{article_id}]", callback_data=f"preview_{article_id}")]
        for article_id, title in pending
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer("üìã –í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)

# === –ü–†–û–°–ú–û–¢–† –°–¢–ê–¢–¨–ò –ü–ï–†–ï–î –†–ï–®–ï–ù–ò–ï–ú ===
@dp.callback_query(F.data.startswith("preview_"))
async def handle_preview(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    article_id = int(callback.data.split("_")[1])

    conn = sqlite3.connect("mamabot.db")
    cur = conn.cursor()
    cur.execute("SELECT title, content FROM articles WHERE id = ?", (article_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await callback.message.edit_text("‚ö†Ô∏è –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞.")
        return

    title, content = row
    preview_text = f"<b>{title}</b>\n\n{content[:1000]}..."
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{article_id}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{article_id}")
        ]
    ])
    await callback.message.edit_text(preview_text, reply_markup=keyboard)

# === –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–¢–ê–¢–¨–ò ===
@dp.callback_query(F.data.startswith("approve_"))
async def handle_approve_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    article_id = int(callback.data.split("_")[1])
    article = approve_article(article_id, return_article=True)
    if not article:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Ç–≤–µ—Ä–¥–∏—Ç—å —Å—Ç–∞—Ç—å—é.")
        return

    pdf_path = article_to_pdf(article['title'], article['content'])
    await bot.send_document(callback.from_user.id, types.FSInputFile(pdf_path), caption="‚úÖ –°—Ç–∞—Ç—å—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await callback.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—å—è ¬´{article['title']}¬ª —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")

# === –£–î–ê–õ–ï–ù–ò–ï –°–¢–ê–¢–¨–ò ===
@dp.callback_query(F.data.startswith("delete_"))
async def handle_delete_callback(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    article_id = int(callback.data.split("_")[1])
    delete_article(article_id)
    await callback.message.edit_text("üóëÔ∏è –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞.")

# === Fallback ===
@dp.message()
async def fallback_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üë∂ 0‚Äì1 –≥–æ–¥"), KeyboardButton(text="üßí 1‚Äì2 –≥–æ–¥–∞")],
        [KeyboardButton(text="üë¶ 3‚Äì6 –ª–µ—Ç"), KeyboardButton(text="üéí 7+ –ª–µ—Ç")]
    ], resize_keyboard=True)
    await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª üôà –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /start.", reply_markup=kb)


@dp.startup()
async def set_commands(bot: Bot):
    await bot.set_my_commands([
        types.BotCommand(command="add_article", description="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ —Å—Å—ã–ª–∫–µ"),
        types.BotCommand(command="approve_articles", description="–£—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ç—å–∏"),
    ])
# === –ó–ê–ü–£–°–ö ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
