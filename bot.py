import asyncio
import os
import logging
import sqlite3
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ===
os.makedirs("logs", exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    handlers=[
        logging.FileHandler("logs/bot.log", encoding="utf-8"),
    ],
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
DB_PATH = "db/your_database.db"

if not os.path.exists(DB_PATH):
    logging.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")
    raise FileNotFoundError(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {DB_PATH}")

try:
    conn = sqlite3.connect(DB_PATH)
    logging.info("üìö –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    conn.close()
except sqlite3.Error as e:
    logging.exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
from handlers import (
    start, education,
    day_with_timmy, library,
    marathons, tips,
    progress, contact, admin
)

dp.include_routers(
    start.router,
    education.router,
    day_with_timmy.router,
    library.router,
    marathons.router,
    tips.router,
    progress.router,
    contact.router,
    admin.router,
)

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ===
os.makedirs("assets/pdf", exist_ok=True)
os.makedirs("assets/voices", exist_ok=True)
logging.info("üìÇ –ü–∞–ø–∫–∏ –¥–ª—è PDF –∏ –∞—É–¥–∏–æ –≥–æ—Ç–æ–≤—ã: assets/pdf, assets/voices.")

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ ===
async def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –Ω–∞ –¥–∏—Å–∫
        for handler in logging.getLogger().handlers:
            handler.flush()

if __name__ == "__main__":
    asyncio.run(main())
