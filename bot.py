import asyncio
import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from config import BOT_TOKEN
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log"),
        logging.StreamHandler()
    ]
)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

dp = Dispatcher()

from handlers import (
    start, helper, education,
    day_with_timmy, library,
    marathons, tips,
    progress, contact
)

dp.include_routers(
    start.router,
    helper.router,
    education.router,
    day_with_timmy.router,
    library.router,
    marathons.router,
    tips.router,
    progress.router,
    contact.router
)

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
os.makedirs("logs", exist_ok=True)
os.makedirs("assets/pdf", exist_ok=True)
os.makedirs("assets/voices", exist_ok=True)
print("üìÇ –ü–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤, PDF –∏ –∞—É–¥–∏–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: logs/, assets/pdf, assets/voices.")

async def main():
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
